import{_ as l,c as s,o as a,a as o,b as e,d as n}from"./app.586394ea.js";const ye=JSON.parse(`{"title":"ScrollTriggle","description":"","frontmatter":{"title":"ScrollTriggle"},"headers":[{"level":2,"title":"简单示例","slug":"简单示例","link":"#简单示例","children":[]},{"level":2,"title":"高级示例","slug":"高级示例","link":"#高级示例","children":[]},{"level":2,"title":"独立或自定义示例","slug":"独立或自定义示例","link":"#独立或自定义示例","children":[]},{"level":2,"title":"⚡ 使用 & 特殊属性","slug":"⚡-使用-特殊属性","link":"#⚡-使用-特殊属性","children":[{"level":3,"title":"⭐ animation: {Tween | Timeline}","slug":"⭐-animation-tween-timeline","link":"#⭐-animation-tween-timeline","children":[]},{"level":3,"title":"anticipatePin: {Number}","slug":"anticipatepin-number","link":"#anticipatepin-number","children":[]},{"level":3,"title":"containerAnimation: {Tween | Timeline}","slug":"containeranimation-tween-timeline","link":"#containeranimation-tween-timeline","children":[]},{"level":3,"title":"⭐ start: {String | Number | Function}","slug":"⭐-start-string-number-function","link":"#⭐-start-string-number-function","children":[]},{"level":3,"title":"⭐ end: {String | Number | Function}","slug":"⭐-end-string-number-function","link":"#⭐-end-string-number-function","children":[]},{"level":3,"title":"endTrigger: {String | Element}","slug":"endtrigger-string-element","link":"#endtrigger-string-element","children":[]},{"level":3,"title":"fastScrollEnd: {Boolean | Number}","slug":"fastscrollend-boolean-number","link":"#fastscrollend-boolean-number","children":[]},{"level":3,"title":"horizontal: {Boolean}","slug":"horizontal-boolean","link":"#horizontal-boolean","children":[]},{"level":3,"title":"id: {String}","slug":"id-string","link":"#id-string","children":[]},{"level":3,"title":"invalidateOnRefresh: {Boolean}","slug":"invalidateonrefresh-boolean","link":"#invalidateonrefresh-boolean","children":[]},{"level":3,"title":"⭐ markers: {Object | Boolean}","slug":"⭐-markers-object-boolean","link":"#⭐-markers-object-boolean","children":[]},{"level":3,"title":"Once: {Boolean}","slug":"once-boolean","link":"#once-boolean","children":[]},{"level":3,"title":"⭐ onEnter: {Function}","slug":"⭐-onenter-function","link":"#⭐-onenter-function","children":[]},{"level":3,"title":"onEnterBack: {Function}","slug":"onenterback-function","link":"#onenterback-function","children":[]},{"level":3,"title":"onLeave: {Function}","slug":"onleave-function","link":"#onleave-function","children":[]},{"level":3,"title":"onLeaveBack: {Function}","slug":"onleaveback-function","link":"#onleaveback-function","children":[]},{"level":3,"title":"onRefresh: {Function}","slug":"onrefresh-function","link":"#onrefresh-function","children":[]},{"level":3,"title":"onUpdate: {Function}","slug":"onupdate-function","link":"#onupdate-function","children":[]},{"level":3,"title":"onScrubComplete: {Function}","slug":"onscrubcomplete-function","link":"#onscrubcomplete-function","children":[]},{"level":3,"title":"onSnappingComplete: {Function}","slug":"onsnappingcomplete-function","link":"#onsnappingcomplete-function","children":[]},{"level":3,"title":"onToggle: {Function}","slug":"ontoggle-function","link":"#ontoggle-function","children":[]},{"level":3,"title":"⭐ pin: {Boolean | String | Element}","slug":"⭐-pin-boolean-string-element","link":"#⭐-pin-boolean-string-element","children":[]},{"level":3,"title":"pinnedContainer: {Element | String}","slug":"pinnedcontainer-element-string","link":"#pinnedcontainer-element-string","children":[]},{"level":3,"title":"pinReparent: {Boolean}","slug":"pinreparent-boolean","link":"#pinreparent-boolean","children":[]},{"level":3,"title":"pinSpacer: {Element}","slug":"pinspacer-element","link":"#pinspacer-element","children":[]},{"level":3,"title":"⭐ pinSpacing: {Boolean | String}","slug":"⭐-pinspacing-boolean-string","link":"#⭐-pinspacing-boolean-string","children":[]},{"level":3,"title":"pinType: {'fixed' | 'transform'}","slug":"pintype-fixed-transform","link":"#pintype-fixed-transform","children":[]},{"level":3,"title":"preventOverlaps: {Boolean | String}","slug":"preventoverlaps-boolean-string","link":"#preventoverlaps-boolean-string","children":[]},{"level":3,"title":"refreshPriotity: {number}","slug":"refreshpriotity-number","link":"#refreshpriotity-number","children":[]},{"level":3,"title":"⭐ scroller: {String | Element}","slug":"⭐-scroller-string-element","link":"#⭐-scroller-string-element","children":[]},{"level":3,"title":"⭐ scrub: {Boolean | Number}","slug":"⭐-scrub-boolean-number","link":"#⭐-scrub-boolean-number","children":[]},{"level":3,"title":"⭐ snap: {Number | Array | Function | Object | 'labels' | 'labelsDirectional'}","slug":"⭐-snap-number-array-function-object-labels-labelsdirectional","link":"#⭐-snap-number-array-function-object-labels-labelsdirectional","children":[]},{"level":3,"title":"⭐ toggleActions: {String}","slug":"⭐-toggleactions-string","link":"#⭐-toggleactions-string","children":[]},{"level":3,"title":"toggleClass: {String | Object}","slug":"toggleclass-string-object","link":"#toggleclass-string-object","children":[]},{"level":3,"title":"trigger: {String | Element}","slug":"trigger-string-element","link":"#trigger-string-element","children":[]}]},{"level":2,"title":"ScrollTrigger工作原理？它和IntersectionObserver类似？","slug":"scrolltrigger工作原理-它和intersectionobserver类似","link":"#scrolltrigger工作原理-它和intersectionobserver类似","children":[]},{"level":2,"title":"Pinning功能底层实现原理是什么？","slug":"pinning功能底层实现原理是什么","link":"#pinning功能底层实现原理是什么","children":[]},{"level":2,"title":"scrub: true和duration如何一起使用？","slug":"scrub-true和duration如何一起使用","link":"#scrub-true和duration如何一起使用","children":[]},{"level":2,"title":"想要 smooth scrolling？","slug":"想要-smooth-scrolling","link":"#想要-smooth-scrolling","children":[]},{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[]},{"level":2,"title":"⚡ 资源和Demos","slug":"⚡-资源和demos","link":"#⚡-资源和demos","children":[]}],"relativePath":"plugins/scroll-trigger/index.md","lastUpdated":1676275730000}`),r={name:"plugins/scroll-trigger/index.md"},t=o(`<nav class="table-of-contents"><ul><li><a href="#简单示例">简单示例</a></li><li><a href="#高级示例">高级示例</a></li><li><a href="#独立或自定义示例">独立或自定义示例</a></li><li><a href="#⚡-使用-特殊属性">⚡ 使用 &amp; 特殊属性</a><ul><li><a href="#⭐-animation-tween-timeline">⭐ animation: {Tween | Timeline}</a></li><li><a href="#anticipatepin-number">anticipatePin: {Number}</a></li><li><a href="#containeranimation-tween-timeline">containerAnimation: {Tween | Timeline}</a></li><li><a href="#⭐-start-string-number-function">⭐ start: {String | Number | Function}</a></li><li><a href="#⭐-end-string-number-function">⭐ end: {String | Number | Function}</a></li><li><a href="#endtrigger-string-element">endTrigger: {String | Element}</a></li><li><a href="#fastscrollend-boolean-number">fastScrollEnd: {Boolean | Number}</a></li><li><a href="#horizontal-boolean">horizontal: {Boolean}</a></li><li><a href="#id-string">id: {String}</a></li><li><a href="#invalidateonrefresh-boolean">invalidateOnRefresh: {Boolean}</a></li><li><a href="#⭐-markers-object-boolean">⭐ markers: {Object | Boolean}</a></li><li><a href="#once-boolean">Once: {Boolean}</a></li><li><a href="#⭐-onenter-function">⭐ onEnter: {Function}</a></li><li><a href="#onenterback-function">onEnterBack: {Function}</a></li><li><a href="#onleave-function">onLeave: {Function}</a></li><li><a href="#onleaveback-function">onLeaveBack: {Function}</a></li><li><a href="#onrefresh-function">onRefresh: {Function}</a></li><li><a href="#onupdate-function">onUpdate: {Function}</a></li><li><a href="#onscrubcomplete-function">onScrubComplete: {Function}</a></li><li><a href="#onsnappingcomplete-function">onSnappingComplete: {Function}</a></li><li><a href="#ontoggle-function">onToggle: {Function}</a></li><li><a href="#⭐-pin-boolean-string-element">⭐ pin: {Boolean | String | Element}</a></li><li><a href="#pinnedcontainer-element-string">pinnedContainer: {Element | String}</a></li><li><a href="#pinreparent-boolean">pinReparent: {Boolean}</a></li><li><a href="#pinspacer-element">pinSpacer: {Element}</a></li><li><a href="#⭐-pinspacing-boolean-string">⭐ pinSpacing: {Boolean | String}</a></li><li><a href="#pintype-fixed-transform">pinType: {&#39;fixed&#39; | &#39;transform&#39;}</a></li><li><a href="#preventoverlaps-boolean-string">preventOverlaps: {Boolean | String}</a></li><li><a href="#refreshpriotity-number">refreshPriotity: {number}</a></li><li><a href="#⭐-scroller-string-element">⭐ scroller: {String | Element}</a></li><li><a href="#⭐-scrub-boolean-number">⭐ scrub: {Boolean | Number}</a></li><li><a href="#⭐-snap-number-array-function-object-labels-labelsdirectional">⭐ snap: {Number | Array | Function | Object | &#39;labels&#39; | &#39;labelsDirectional&#39;}</a></li><li><a href="#⭐-toggleactions-string">⭐ toggleActions: {String}</a></li><li><a href="#toggleclass-string-object">toggleClass: {String | Object}</a></li><li><a href="#trigger-string-element">trigger: {String | Element}</a></li></ul></li><li><a href="#scrolltrigger工作原理-它和intersectionobserver类似">ScrollTrigger工作原理？它和IntersectionObserver类似？</a></li><li><a href="#pinning功能底层实现原理是什么">Pinning功能底层实现原理是什么？</a></li><li><a href="#scrub-true和duration如何一起使用">scrub: true和duration如何一起使用？</a></li><li><a href="#想要-smooth-scrolling">想要 smooth scrolling？</a></li><li><a href="#faq">FAQ</a></li><li><a href="#⚡-资源和demos">⚡ 资源和Demos</a></li></ul></nav><p>文档地址：<a href="https://greensock.com/scrolltrigger/" target="_blank" rel="noreferrer">GSAP ScrollTrigger</a></p><p>原文地址： <a href="https://greensock.com/docs/v3/Plugins/ScrollTrigger" target="_blank" rel="noreferrer">ScrollTrigger</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>务必先观看原文档中提供的视频教程！！！</p><p>使用ScrollTrigger小技巧：</p><ul><li>先完成动画部分</li><li>在和ScrollTrigger进行结合</li><li><a href="./../../recipes/scroll-trigger.html">ScrollTrigger Recipes 用法快速预览</a></li></ul></div><p>ScrollTrigger 可以触发任何和滚动相关的东西，即使和动画没有关系。</p><p>ScrollTrigger的高光功能：</p><ul><li><strong><code>将任意动画与特定元素链接起来</code></strong> 因此只在改元素进入视窗（<code>viewport</code>）时才开始动画。这能提升性能，并确保你能看到你设定的动画</li><li>🤩 ScrollTriggers在target<code>进入或离开</code>指定区域时，能对target执行动画动作（<code>play | pause | resume | restart | reverse | complete | reset</code>）或者直接和滚动条链接起来，使其表现得像一个滚筒洗衣机（<code>scrub: true</code>）😎</li><li>🤩 <strong><code>软化动画和滚动条之间的关联</code></strong>， 因此使其花费特定时间去 <strong><code>追赶</code></strong> 滚动条，比如 <code>scrub: 1</code> 表示target花费（滞后）1s追赶滚动条</li><li><strong>与 <a href="https://greensock.com/docs/v3/Plugins/ScrollSmoother" target="_blank" rel="noreferrer">ScrollSmoother</a> 集成</strong>。GreenSock构建在原生滚动技术基础上的光滑滚动(<code>会员Only</code>)</li><li><strong>基于速度捕捉（<code>snap to</code>）动画中的特定点</strong>。事实上，你随时都可通过 <code>getVelocity()</code> 获取滚动速度。对其时间轴中最近的label或数组中进度值，或者运行你自己的基于函数的自定义逻辑进行捕获</li><li><strong>可直接嵌入任何GSAP动画（包括时间轴）</strong> 或 创建 <strong>独立实例</strong>，使用丰富的回调系统做任何你想要做的事情</li><li>🤩 <strong>高级Pinning能力</strong> ，可使target锁定在特定滚动位置。Padding会自动添加，以相应地将其他元素向下推，因此当元素被松开时，它们会赶上（通过 <code>pinSpacing: false</code> 禁用Padding）。你还可以对同一个元素在不同点固定多次</li><li>🤩 <strong>滚动位置定义超级灵活</strong> - 比如 <em>当元素的中心位置到达视窗的中心点是开始动画，又或者当<code>另一个元素</code>的底部到达视窗的底部时</em>。使用关键词 （<code>top | bottom | center | left | right</code>）,百分比，像素，甚至相对位置 <code>+=300px</code>。一旦你适应了这种语法，你就会觉得它十分的直观</li><li>适应<code>垂直或水平滚动</code></li><li>🤩 <strong><code>丰富的回调系统</code></strong><ul><li>onEnter &amp; onEnterBack</li><li>onLeave &amp; onLeaveBack</li><li>onToggle</li><li>onUpdate</li><li>onScrubComplete</li><li>onRefresh</li></ul></li><li><strong>当windows resize时，自动重新计算位置</strong></li><li><strong>切换 CSS 类</strong>。比如 <code>toggleClass: &#39;active&#39;</code> 在ScrollTrigger触发时，会给trigger元素添加 <code>active</code> 类。你也可以影响其它元素</li><li><strong>响应式</strong> - 使用 <a href="https://greensock.com/docs/v3/GSAP/gsap.matchMedia()" target="_blank" rel="noreferrer">gsap.matchMedia()</a> 对不同的屏幕尺寸进行不同的动画设置，它使用标准的媒体查询</li><li><strong>自定义容器</strong> - 你可以不使用视窗（<code>viewport</code>）；比如定义一个 <code>&lt;div&gt;</code> 作为自定义滚动器</li><li><strong>高度性能优化</strong> - 滚动事件会debounced，更新与GSAP和屏幕刷新同步，调整大小重新计算被throttled，等等。</li><li><strong>不会出现滚动卡顿</strong> - 它可以结合原生的CSS scroll snapping技术。如果你平滑的滚动，可以丝滑的在ScrollTrigger中接入 <a href="https://greensock.com/docs/v3/Plugins/ScrollSmoother" target="_blank" rel="noreferrer">ScrollSmoother</a>，或者使用 <a href="https://greensock.com/docs/v3/Plugins/ScrollTrigger/static.scrollerProxy()" target="_blank" rel="noreferrer">scrollerProxy</a> 方法继承第3方的平滑滚动库（比如 <a href="https://github.com/locomotivemtl/locomotive-scroll" target="_blank" rel="noreferrer">lecomotive-scroll</a> &amp; <a href="https://github.com/studio-freight/lenis" target="_blank" rel="noreferrer">lenis</a>）</li></ul><h2 id="简单示例" tabindex="-1">简单示例 <a class="header-anchor" href="#简单示例" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">gasp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">scrollTrigger</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 当 &#39;.box&#39; 进入viewport时开始动画（只动画一次）</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">purple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">duration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,9),c=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/JamesSawyer/embed/preview/MWGxWoN?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/JamesSawyer/pen/MWGxWoN">
  Untitled</a> by james sawyer (<a href="https://codepen.io/JamesSawyer">@JamesSawyer</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),p=o(`<h2 id="高级示例" tabindex="-1">高级示例 <a class="header-anchor" href="#高级示例" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> tl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gsap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeline</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 😎 没错，ScrollTrigger还可以添加到Timeline中</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">scrollTrigger</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">trigger</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.container</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 当动画激活时，固定trigger元素</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">top top</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 当触发元素的顶部到达viewport的顶部时，开始动画</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">+=500</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 相对于trigger元素开始位置的500px位置，停止动画</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">scrub</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 平滑滚动，花费1s追赶滚动条</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">snap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">snapTo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">labels</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 捕获最近的时间轴自定义标签</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">duration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">min</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">max</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 捕获动画至少0.2s，最多3s，由滚动速度决定</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">delay</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 从最后一个滚动事件开始等待0.2秒，然后再进行捕获</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">ease</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">power1.inOut</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 捕获动画缓动函数（默认 &#39;power3&#39;）</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在时间轴上添加动画和labels</span></span>
<span class="line"><span style="color:#A6ACCD;">tl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addLabel</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.box p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">scale</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">rotation</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">45</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">autoAlpha</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addLabel</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">color</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">backgroundColor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#28a92b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addLabel</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">spin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">rotation</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">360</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addLabel</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="独立或自定义示例" tabindex="-1">独立或自定义示例 <a class="header-anchor" href="#独立或自定义示例" aria-hidden="true">#</a></h2><p>你不必将ScrollTriggers直接放在动画中（尽管这是最常见的一种做法😅）。使用回调做任何想做的事情：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ScrollTrigger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">trigger</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">top top</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">endTrigger</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#otherID</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bottom 50%+=100px</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">onToggle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">self</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toggled, isActive:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isActive)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">onUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">self</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">progress:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">progress</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">direction:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">velocity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getVelocity</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="⚡-使用-特殊属性" tabindex="-1">⚡ 使用 &amp; 特殊属性 <a class="header-anchor" href="#⚡-使用-特殊属性" aria-hidden="true">#</a></h2><p><code>scrollTrigger</code> 可以简写为 <code>trigger</code> 或者 配置写成一个对象，配置对象有如下属性</p><h3 id="⭐-animation-tween-timeline" tabindex="-1">⭐ <code>animation</code>: <code>{Tween | Timeline}</code> <a class="header-anchor" href="#⭐-animation-tween-timeline" aria-hidden="true">#</a></h3><p>被ScrollTrigger控制的GSAP <a href="https://greensock.com/docs/v3/GSAP/Tween" target="_blank" rel="noreferrer">Tween</a> 或 <a href="https://greensock.com/docs/v3/GSAP/Timeline" target="_blank" rel="noreferrer">Timeline</a> 实例。每个ScrollTrigger只能控制一个动画，但是你可以将所有动画都通过一个时间轴包装起来（best💡）或者 如果你喜欢的话，也可以创建多个ScrollTrigger。</p><h3 id="anticipatepin-number" tabindex="-1"><code>anticipatePin: {Number}</code> <a class="header-anchor" href="#anticipatepin-number" aria-hidden="true">#</a></h3><p>如果你固定大的区域/面板，你可能会注意到，当你快速滚动时，固定看起来有点延迟。这是因为大多数现代浏览器在单独的线程上处理滚动重绘，因此，在固定的时刻，浏览器可能已经绘制了预先固定的内容，使其可见大约1/60秒。<code>解决这一问题的唯一方法是让ScrollTrigger监视滚动速度并预测固定位置，稍早地应用它以避免未固定内容的闪烁。</code> 使用 <code>anticipatePin: 1</code>一般就可以了，但是你可以减少或增加这个数字来控制它的固定时间。然而，在许多情况下，你不需要任何使用这个属性(默认值为0)。</p><h3 id="containeranimation-tween-timeline" tabindex="-1"><code>containerAnimation: {Tween | Timeline}</code> <a class="header-anchor" href="#containeranimation-tween-timeline" aria-hidden="true">#</a></h3><p>一种流行的效果：水平移动区域绑定垂直滚动，但是因为水平滚动不是原生滚动，普通的ScrollTrigger是不知道水平方向的元素什么时候进入视野的，因此你必须告诉ScrollTrigger监控容器的 <code>水平方向</code> 的动画，以便使target触发，例如 <code>containerAnimation: yourTween</code>。可参考如下示例：</p>`,13),i=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:'Horizontal "containerAnimation" - ScrollTrigger',src:"https://codepen.io/GreenSock/embed/preview/WNjaxKp?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/WNjaxKp">
  Horizontal &quot;containerAnimation&quot; - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),d=o(`<p>以及更详细的 <a href="https://greensock.com/3-8/#containerAnimation" target="_blank" rel="noreferrer">containerAnimation</a>。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>🚨 缺陷：</p><ol><li>容器动画必须使用 <strong>线性动画（即 <code>ease: &#39;none&#39;</code>）</strong></li><li>Pinning &amp; snapping对基于containerAnimation的ScrollTrigger中是不能使用的</li><li>你应该避免对 <code>trigger</code> 元素进行水平动画，如果你一定要给trigger元素添加水平方向的动画，则请依据trigger元素水平移动的距离来偏移 <code>start | end</code> 值</li></ol></div><h3 id="⭐-start-string-number-function" tabindex="-1">⭐ <code>start: {String | Number | Function}</code> <a class="header-anchor" href="#⭐-start-string-number-function" aria-hidden="true">#</a></h3><p>决定ScrollTrigger的开始位置，可以是如下类型，默认值是 <code>top bottom</code>，但当设置了 <code>pin: true</code> 时，默认值变为 <code>top top</code></p><ul><li><p><code>String</code> - 描述位置， <code>trigger</code> 和 <code>scroller</code> 的开始位置，当 <code>trigger</code> 的开始位置和 <code>scroller</code> 的开始位置重合时，就会触发ScrollTrigger，🌰</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1️⃣</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 表示当trigger的top触碰到scroller（默认是 \`viewport\`）的center时，触发ScrollTrigger</span></span>
<span class="line"><span style="color:#FFCB6B;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">top center</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2️⃣</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 表示当trigger的button触碰到scroller（默认是 \`viewport\`）的 &#39;80%&#39; 位置（从上向下）时，触发ScrollTrigger</span></span>
<span class="line"><span style="color:#FFCB6B;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bottom 80%</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3️⃣ 还可以使用 &#39;top&#39; | &#39;bottom&#39; | &#39;center&#39; 等值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4️⃣ 百分比和像素值 总是相对于trigger/scroller的 top/left 位置</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当trigger的top触碰到viewport/scroller的100px位置时，触发ScrollTrigger</span></span>
<span class="line"><span style="color:#FFCB6B;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">top bottom-=100px</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div></li><li><p><code>Number</code> - 准确的滚动值，比如 <code>200</code> 表示当 <code>Scroller|Viewport</code> 恰好滚动200px时触发</p></li><li><p><code>Function</code> - 当ScrollTrigger计算其位置时调用的函数（一般是ScrollTrigger创建和页面resize时）。它要返回一个String | Number。这使得动态计算值变得容易。与所有回调函数一样，该函数接收ScrollTrigger实例本身作为唯一参数。因此，你可以基于先前ScrollTrigger的 <code>end</code> 位置，比如 <code>start: self =&gt; self.previous().end</code></p></li></ul><p>这是一个<code>静态</code>位置，在创建ScrollTrigger和调整滚动器大小时，根据正常文档流中的内容位置计算该位置。它不会不断地重新计算，因此，例如，🚨如果你对 <code>trigger|endTrigger</code> 进行动画，它不会不断更新相应的<code>开始/结束值</code>，因为ScrollTrigger在性能方面进行了高度优化。你可以使用 <code>ScrollTrigger.refresh()</code> 强制重新计算。</p><h3 id="⭐-end-string-number-function" tabindex="-1">⭐ <code>end: {String | Number | Function}</code> <a class="header-anchor" href="#⭐-end-string-number-function" aria-hidden="true">#</a></h3><p>决定ScrollTrigger结束位置。可以是如下类型，默认值是 <code>bottom top</code></p><ol><li><p><code>String</code>: 描述 <code>endTrigger</code> (如果没有定义此属性，则使用 <code>trigger</code>) 位置和 <code>Scroller</code> 的结束位置，此属性用于结束ScrollTrigger，🌰</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1️⃣</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 表示当 endTrigger的bottom位置 触碰到 Scroller 的 center位置时 结束ScrollTrigger</span></span>
<span class="line"><span style="color:#FFCB6B;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bottom center</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2️⃣ 假设垂直方向滚动</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 表示当 endTrigger的center位置 触碰到 Scroller 的从上往下100px位置时</span></span>
<span class="line"><span style="color:#FFCB6B;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">center 100px</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">💡</p><p>你还可以看到</p><ol><li><code>top | bottom | center</code>，</li><li>又或者 当 <code>horizontal: &#39;true&#39;</code> 时的 <code>left | right</code>，</li><li>以及 百分比 <code>80%</code> 或者 像素值 <code>100px</code></li><li>或者<code>单个相对值</code>, 比如 <code>+=300</code>，表示距离其开始位置300px外；或者 <code>+=100%</code> 表示距离开始位置相对于Scroller高度外的位置</li><li><code>&quot;max&quot;</code> 是个特殊值，表示最大滚动位置</li></ol></div></li><li><p><code>Number</code>：准确的滚动值，比如 <code>200</code> 表示当 <code>Scroller|Viewport</code> 恰好滚动200px时触发</p></li><li><p><code>Function</code>：每当ScrollTrigger刷新并计算其位置时(通常是在创建时和滚动器调整大小时)调用的函数。它应该返回一个如上所述的String或Number。这使得动态计算值变得容易。与所有回调函数一样，该函数接收ScrollTrigger实例本身作为唯一参数。</p></li></ol><p>这是一个<code>静态</code>位置，在创建ScrollTrigger和调整滚动器大小时，根据正常文档流中的内容位置计算该位置。它不会不断地重新计算，因此，例如，🚨如果你对 <code>trigger|endTrigger</code> 进行动画，它不会不断更新相应的<code>开始/结束值</code>，因为ScrollTrigger在性能方面进行了高度优化。你可以使用 <code>ScrollTrigger.refresh()</code> 强制重新计算。</p><h3 id="endtrigger-string-element" tabindex="-1"><code>endTrigger: {String | Element}</code> <a class="header-anchor" href="#endtrigger-string-element" aria-hidden="true">#</a></h3><p>在正常文档流中的位置，用于计算ScrollTrigger结束位置的元素(或元素的选择器文本)。</p><p>除非 <code>endTrigger</code> 不同于 <code>trigger</code> 时，才会定义这个属性，默认的<code>endTrigger</code>就是 <code>trigger</code> 元素自身😁。</p><h3 id="fastscrollend-boolean-number" tabindex="-1"><code>fastScrollEnd: {Boolean | Number}</code> <a class="header-anchor" href="#fastscrollend-boolean-number" aria-hidden="true">#</a></h3><p>如果为true，它将强制当前ScrollTrigger的动画完成，如果你离开它的触发区域的速度超过一定的速度(默认为<code>2500px/s</code>)。这有助于在用户快速滚动时避免重叠的动画。你可以为最小速度指定一个数字。比如 <code>fastScrollEnd: 3000</code> 表示当速度超过 <code>3000px/s</code> 时才会激活此效果。</p>`,15),g=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"preventOverlaps and fastScrollEnd | ScrollTrigger | GSAP",src:"https://codepen.io/GreenSock/embed/preview/ZEyXPGj?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/ZEyXPGj">
  preventOverlaps and fastScrollEnd | ScrollTrigger | GSAP</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),h=o(`<h3 id="horizontal-boolean" tabindex="-1"><code>horizontal: {Boolean}</code> <a class="header-anchor" href="#horizontal-boolean" aria-hidden="true">#</a></h3><p>默认情况都是假设针对的是垂直方向的滚动，而如果想设置水平方向的滚动，则使用 <code>horizontal: true</code></p><h3 id="id-string" tabindex="-1"><code>id: {String}</code> <a class="header-anchor" href="#id-string" aria-hidden="true">#</a></h3><p>任意唯一字符串，用于ScrollTrigger实例。2个作用：</p><ol><li>可通过 <code>ScrollTrigger.getById()</code> 获取该ScrollTrigger实例</li><li>添加到 <code>markers</code> 中，便于调试😎</li></ol><h3 id="invalidateonrefresh-boolean" tabindex="-1"><code>invalidateOnRefresh: {Boolean}</code> <a class="header-anchor" href="#invalidateonrefresh-boolean" aria-hidden="true">#</a></h3><p>如果为<code>true</code>，与ScrollTrigger关联的动画将在<code>refresh()</code>发生时(通常是在resize时)调用它的<code>invalidate()</code>方法。这将刷新任何内部记录的开始值。</p><h3 id="⭐-markers-object-boolean" tabindex="-1">⭐ <code>markers: {Object | Boolean}</code> <a class="header-anchor" href="#⭐-markers-object-boolean" aria-hidden="true">#</a></h3><p>开发阶段添加markers，便于调试。</p><ol><li><code>markers: true</code> 将设置默认的样式 <code>(startColor: &quot;green&quot;, endColor: &quot;red&quot;, fontSize: &quot;16px&quot;, fontWeigth: &quot;normal&quot;, indent: 0)</code></li><li>可以自定义一个对象，eg: <code>markers: {startColor: &quot;white&quot;, endColor: &quot;white&quot;, fontSize: &quot;18px&quot;, fontWeight: &quot;bold&quot;, indent: 20}</code></li></ol><h3 id="once-boolean" tabindex="-1"><code>Once: {Boolean}</code> <a class="header-anchor" href="#once-boolean" aria-hidden="true">#</a></h3><p>如果为<code>true</code>, ScrollTrigger将在到达<code>一次</code>结束位置后立即<code>kill()</code>自身。这将导致它停止监听滚动事件，并符合垃圾收集的条件。这将只调用<code>onEnter</code>最多一次。<code>它不会杀死相关的动画</code>。当你只希望一个动画在向前滚动时播放一次，永远不会重置或重放时，它是完美的😎。它还将<code>toggleActions</code>设置为 <code>&quot;play none none none&quot;</code>。</p><h3 id="⭐-onenter-function" tabindex="-1">⭐ <code>onEnter: {Function}</code> <a class="header-anchor" href="#⭐-onenter-function" aria-hidden="true">#</a></h3><p>当滚动位置向前滚动超过 <code>start</code> 位置时的回调函数（一般是当 <code>trigger</code> 滚动进入视野时）。它接收一个参数 - ScrollTrigger实例本身，实例包含 <code>progress &amp; direction &amp; getVelocity() &amp; isActive</code> 等等属性和方法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">onEnter</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isActive</span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isActive</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,15),y=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Callbacks - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/qBdeVJY?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/qBdeVJY">
  Callbacks - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),u=o(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>理解： 假设向上⬆️滚动是 move forward</p><ul><li>onEnter: <code>trigger-Start</code> 到达 <code>scrollor-End</code> 滚动方向 ⬆️ forward</li><li>onLeave: <code>trigger-End</code> 超过 <code>scrollor-End</code> 滚动方向 ⬆️ forward</li><li>onEnterBack: <code>trigger-End</code> 回到 <code>scrollor-End</code> 下面 滚动方向 ⬇️ backward</li><li>onLeaveBack: <code>trigger-Start</code> 回到 <code>scrollor-Start</code> 下面 滚动方向 ⬇️ backward</li><li>onUpdate: <code>trigger</code> 在 <code>scrollor</code> 之间进行滚动时，持续触发，即 <code>trigger-Start</code> 超过 <code>scrollor-Start</code>，而 <code>trigger-End</code> 在 <code>scrollor-End</code> 下面</li><li>onRefresh: 页面布局完成时，又或者resize页面之后布局完成时触发</li></ul></div><h3 id="onenterback-function" tabindex="-1"><code>onEnterBack: {Function}</code> <a class="header-anchor" href="#onenterback-function" aria-hidden="true">#</a></h3><p>当滚动位置向后移动超过 <code>end</code> 时的回调(通常是当 <code>trigger</code> 滚动回视野时)。</p><ul><li><code>trigger-End</code> 回到 <code>scrollor-End</code> 下面 滚动方向 ⬇️ backward</li></ul><p>参数部分同 <code>onEnter</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">onEnterBack</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isActive</span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isActive</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="onleave-function" tabindex="-1"><code>onLeave: {Function}</code> <a class="header-anchor" href="#onleave-function" aria-hidden="true">#</a></h3><p><code>trigger-End</code> 超过 <code>scrollor-End</code> 滚动方向 ⬆️ forward (通常是当 <code>trigger</code> 滚动离开视野时)。参数部分：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">onLeave</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isActive</span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isActive</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="onleaveback-function" tabindex="-1"><code>onLeaveBack: {Function}</code> <a class="header-anchor" href="#onleaveback-function" aria-hidden="true">#</a></h3><p><code>trigger-Start</code> 回到 <code>scrollor-Start</code> 下面 滚动方向 ⬇️ backward。参数同上</p><h3 id="onrefresh-function" tabindex="-1"><code>onRefresh: {Function}</code> <a class="header-anchor" href="#onrefresh-function" aria-hidden="true">#</a></h3><p>刷新发生时的回调(通常是<code>resize</code>事件)，它强制ScrollTrigger重新计算它的所有位置。参数同上</p><h3 id="onupdate-function" tabindex="-1"><code>onUpdate: {Function}</code> <a class="header-anchor" href="#onupdate-function" aria-hidden="true">#</a></h3><p>每当ScrollTrigger的进度发生变化(即滚动位置发生变化)时调用的回调。</p><p>如果你使用了数字类型的 <code>scrub</code>，例如 <code>scrub: 1</code>，请注意，在滚动位置停止后，相关的动画将继续运动一段时间，所以如果你的目标是在动画更新时更新某些内容，最好对动画本身使用 <code>onUpdate</code>，而不是对ScrollTrigger💡。可参考如下demo</p>`,16),F=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/JamesSawyer/embed/preview/mdLomKr?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/JamesSawyer/pen/mdLomKr">
  Untitled</a> by james sawyer (<a href="https://codepen.io/JamesSawyer">@JamesSawyer</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),D=o(`<h3 id="onscrubcomplete-function" tabindex="-1"><code>onScrubComplete: {Function}</code> <a class="header-anchor" href="#onscrubcomplete-function" aria-hidden="true">#</a></h3><p>当 <strong>数值类型 <code>scrub</code></strong> 完成时的回调函数。只对数值类型的 <code>scrub</code> 才有效，比如 <code>scrub: 1</code>。回调接收参数同上：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">scrub</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">onScrubComplete</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isActive</span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isActive</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="onsnappingcomplete-function" tabindex="-1"><code>onSnappingComplete: {Function}</code> <a class="header-anchor" href="#onsnappingcomplete-function" aria-hidden="true">#</a></h3><p>当捕捉位置(<code>snapping</code>)完成时的回调函数。只有定义了 <code>snap</code> 配置时才生效。如果当用户取消snap，这个回调函数不会触发。回调接收参数同上：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">snap</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 每次以 10% 进行位置捕获</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">onSnapComplete</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isActive</span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isActive</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="ontoggle-function" tabindex="-1"><code>onToggle: {Function}</code> <a class="header-anchor" href="#ontoggle-function" aria-hidden="true">#</a></h3><p>当ScrollTrigger从 <code>active</code> 变为 <code>inactive</code>，或者 <code>inactive</code> 变为 <code>active</code> 时触发的回调函数。这通常是当滚动位置移动到“开始”或“结束”的任何一个方向时，但如果它在同一Tick中超过“开始”或“结束”，比如如果用户滚动非常快，onToggle将不会触发，因为状态没有改变🚨。</p><p>你可以在 <code>onEnter | onLeave | onEnterBack | onLeaveBack</code> 回调中使用 <code>isActive</code> 属性来进行切换操作。回调接收参数同上：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">onToggle</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isActive</span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">progress</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isActive</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="⭐-pin-boolean-string-element" tabindex="-1">⭐ <code>pin: {Boolean | String | Element}</code> <a class="header-anchor" href="#⭐-pin-boolean-string-element" aria-hidden="true">#</a></h3><p>元素或者元素选择器，表示ScrollTrigger激活时，该元素固定（<code>pinned</code>）在 <code>start</code> 位置，而其余部分则继续滚动。</p><ul><li>只允许固定一个元素，不过你可用这个元素包含任意元素</li><li><code>pin: true</code> - 表示固定 <code>trigger</code> 元素</li><li>🚨警告 - 不要对固定元素进行动画，因为那样会丢失测量结果(ScrollTrigger在性能方面进行了高度优化，并尽可能地预先计算)</li><li>💡相反，你可以嵌套一些东西，以便只对固定元素内部的元素进行动画处理😎。</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果你要固定的元素嵌套在另一个固定元素内部，请确保定义 <code>pinnedContainer</code>，这样ScrollTrigger就知道相应地偏移开始/结束位置。</p></div><h3 id="pinnedcontainer-element-string" tabindex="-1"><code>pinnedContainer: {Element | String}</code> <a class="header-anchor" href="#pinnedcontainer-element-string" aria-hidden="true">#</a></h3><p>如果你的ScrollTrigger的 <code>trigger | endTrigger</code> 元素在另一个ScrollTrigger元素内，该元素也被pinned（很不常见的一种用法），这将导致开始/结束位置被抛出，不管pin持续多长时间，所以你可以设置 <code>pinnedContainer</code> 的父/容器元素，让ScrollTrigger计算相应的偏移量。再次强调，这种场景很少见。</p><p>🚨不支持嵌套固定，因此该特性只适用于不固定的ScrollTriggers。</p><h3 id="pinreparent-boolean" tabindex="-1"><code>pinReparent: {Boolean}</code> <a class="header-anchor" href="#pinreparent-boolean" aria-hidden="true">#</a></h3><p>如果为 <code>true</code>，则固定元素的在激活时，其父容器将变为 <code>&lt;body&gt;</code>，这样使该固定元素脱离原父元素。如果在固定时，你看到了奇怪的现象，比如固定的元素突然移动，然后随着滚动移动，你可能在固定元素的父元素上设置了 <code>will-change | transform</code> 属性，这破坏了 <a href="https://stackoverflow.com/questions/15194313/transform3d-not-working-with-position-fixed-children%22" target="_blank" rel="noreferrer">position: fixed</a> 行为（这是浏览器的问题，不是ScrollTrigger）。</p><p>最好设置你的项目来避免这些问题，因为Reparent可能是很消耗性能的，但如果你不能避免它们，pinReparent: true可以帮助你。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>只有在必须时才使用此功能。</p><p>警告：如果你的CSS规则依赖于特定的嵌套，会受到Reparent的影响，它们就会被打破。</p><p>🌰，如果你用<code>pinReparent: true</code>固定<code>.panel</code>元素，像<code>.section .panel p {color: white}</code>这样的CSS规则将不再适用于嵌套的<code>&lt;p&gt;</code>，因为在固定期间，它将不再在<code>&lt;section&gt;</code>中，所以确保你编写的CSS规则能够适应Reparent。</p></div><h3 id="pinspacer-element" tabindex="-1"><code>pinSpacer: {Element}</code> <a class="header-anchor" href="#pinspacer-element" aria-hidden="true">#</a></h3><p>默认情况下，ScrollTrigger会用 <code>&lt;div&gt;</code> 对固定的元素进行包裹。但在一种极少见的使用场景中，比如你在固定元素中加载一个 <code>iframe</code>，当ScrollTrigger因为resize等原因刷新时，可能导致 <code>iframe</code> 也进行刷新，因此这个属性的功能就是，允许你指定一个元素作为Spacer，而不是使用默认生成的 <code>&lt;div&gt;</code>。这样的话，在ScrollTrigger刷新时，不会移除或添加该Spacer，这使得iframe不会受到ScrollTrigger刷新的影响。</p><h3 id="⭐-pinspacing-boolean-string" tabindex="-1">⭐ <code>pinSpacing: {Boolean | String}</code> <a class="header-anchor" href="#⭐-pinspacing-boolean-string" aria-hidden="true">#</a></h3><p>默认情况下，会给固定元素底部添加一个padding（<code>horizontal: true</code> 时给固定元素右侧添加），使其它元素向下移动，这样在固定元素不再固定时，后面的元素内容能完美的填补上该padding。</p><p>你可以通过 <code>pinSpacing: false</code> 告诉ScrollTrigger不要添加任何Padding。如果你想使用margin而不是padding，则可以使用 <code>pinSpacing: &quot;margin&quot;</code> 设置。</p><p>注意，<code>pinSpacing</code> 大多数情况下都是能正常工作的，但它还是会依赖你设置DOM和CSS的方式。例如，如果你在带有<code>display: flex</code>或<code>position: absolute</code>的父元素中固定了一些内容，额外的Padding不会将其他元素向下/右推，所以你可能需要手动将内容分隔开来。pinSpacing只是在大多数情况下工作的便利工具。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果容器是 <code>display: flex</code>，则 <code>pinSpacing</code> 默认会设置为 <code>false</code>。因为这通常是你想要的，因为Padding在该上下文中的工作方式不同。</p></div><h3 id="pintype-fixed-transform" tabindex="-1"><code>pinType: {&#39;fixed&#39; | &#39;transform&#39;}</code> <a class="header-anchor" href="#pintype-fixed-transform" aria-hidden="true">#</a></h3><p>当scrollor是 <code>body</code> 时，为 <code>fixed</code>，其余情况都为 <code>transform</code>(因为 <code>position: fixed</code> 在大多数嵌套的场景中都不能正常工作)，但你可以使用 <code>pinType: &#39;fixed&#39;</code> <strong>强制</strong> ScrollTrigger使用 <code>position: fixed</code>。</p><p>通常这不是必需的或者有用的。请注意如果你设置了 <code>will-change: transform</code> CSS属性，浏览器会把它当做就好像使用了transform一样的，会破坏 <code>position: fixed</code> 元素（这和GSAP ScrollTrigger是没有关系的😅） 。</p><h3 id="preventoverlaps-boolean-string" tabindex="-1"><code>preventOverlaps: {Boolean | String}</code> <a class="header-anchor" href="#preventoverlaps-boolean-string" aria-hidden="true">#</a></h3><p>当ScrollTrigger将触发动画时，这个功能激活；它会找到先前的基于ScrollTrigger的动画，强制这些先前的动画为其终止（<code>end</code>）状态 - 避免丑陋的重叠。</p><ul><li>如果为 <code>true</code>，它将影响所有先前的ScrollTrigger📚</li><li>可以使用任意字符串将其效果限制为仅具有匹配字符串的其他字符串，因此 <code>preventOverlaps: &#39;group1&#39;</code> 将只影响到其它 <code>preventOverlaps</code> 为 <code>&#39;group1&#39;</code> 的ScrollTrigger</li></ul>`,34),f=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"preventOverlaps and fastScrollEnd | ScrollTrigger | GSAP",src:"https://codepen.io/GreenSock/embed/preview/ZEyXPGj?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/ZEyXPGj">
  preventOverlaps and fastScrollEnd | ScrollTrigger | GSAP</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),b=o(`<h3 id="refreshpriotity-number" tabindex="-1"><code>refreshPriotity: {number}</code> <a class="header-anchor" href="#refreshpriotity-number" aria-hidden="true">#</a></h3><p>基本上你是用不到这个属性的😅，只要你 <strong><code>从上到下 | 从左到右</code></strong> 的滚动发生顺序创建ScrollTiggers，这也是强烈推荐的做法。否则，使用refreshPriority来影响刷新ScrollTriggers的顺序，以确保将固定距离（<code>pinning distance</code>）添加到页面更下面的后续ScrollTriggers的起始/结束值(这就是顺序很重要的原因)。<code>refreshPriority: 1</code> 的ScrollTrigger要比 <code>refreshPriority: 0</code> （默认值）的ScrollTrigger刷新更早，你也可以给多个ScrollTrigger添加相同的 <code>refreshPriority</code> 值。</p><h3 id="⭐-scroller-string-element" tabindex="-1">⭐ <code>scroller: {String | Element}</code> <a class="header-anchor" href="#⭐-scroller-string-element" aria-hidden="true">#</a></h3><p>默认情况下，scroller是 <code>viewport</code>（视窗）本身，但是，如果你想给一个可滚动的 <code>&lt;div class=&quot;container&quot;&gt;</code> 添加一个ScrollTrigger，则可以直接定义 <code>scroller: &#39;.container&#39;</code> 即可。</p><h3 id="⭐-scrub-boolean-number" tabindex="-1">⭐ <code>scrub: {Boolean | Number}</code> <a class="header-anchor" href="#⭐-scrub-boolean-number" aria-hidden="true">#</a></h3><p>将动画的进度直接和<code>scrollbar</code>链接起来，因此看起来就像一个清洗机（Scrubber）一样。你还可以使用数字类型，使动画头出现延迟追赶滚动条的效果。</p><ul><li><code>Boolean</code> - <code>scrub: true</code> 直接将动画进度与ScrollTrigger的进度联系起来</li><li><code>Number</code> - <code>scrub: 0.5</code> 追赶的时间长度，单位s。这里的 <code>0.5</code> 表示动画花费0.5s追赶滚动条的位置</li></ul><h3 id="⭐-snap-number-array-function-object-labels-labelsdirectional" tabindex="-1">⭐ <code>snap: {Number | Array | Function | Object | &#39;labels&#39; | &#39;labelsDirectional&#39;}</code> <a class="header-anchor" href="#⭐-snap-number-array-function-object-labels-labelsdirectional" aria-hidden="true">#</a></h3><p>📚<strong>允许你在滚动停止后，捕获特定的进度值（0-1之间）</strong>。比如： <code>snap: 0.1</code> 表示每次按 <code>0.1</code> 增量捕获（10%，20%，30%等等）。 <code>snap: [0, 0.1, 0.5, 0.8, 1]</code> 则表示捕获具体的进度值。它可以是以下任何一种：</p><ul><li><code>Number</code> - <code>snap: 0.1</code> 按照每次10%的增量进行捕获。如果你有特定数量的sections，可以使用 <code>snap: 1 / (sections - 1)</code> 💡</li><li><code>Array</code> - <code>snap: [0, 0.1, 0.5, 1]</code> 捕获到数组中最近的进度值，以最近一次滚动的方向（触发你设置了 <code>directional: false</code>）</li><li><code>Function</code> - <code>snap: (value) =&gt; Math.round(value / 0.2) * 0.2</code> 将自然目标值(基于速度)输入到函数中，并使用返回的任何值作为最终进度值（这里是0.2增量），这里可添加任何你想要的逻辑。<code>这些值应该总是在0和1之间，表示动画的进度，所以0.5应该在中间。</code></li><li><code>&quot;labels&quot;</code> - <code>snap: &quot;labels&quot;</code> 捕获到时间轴上最近的标签（当然，动画必须是带有labels的时间轴😅）</li><li>⚡ <code>&quot;labelsDirectional&quot;</code> - <code>snap: &quot;labelsDirectional&quot;</code> 捕获到时间轴中最近滚动方向上的最近标签。因此，如果你向下一个标签滚动一点(并停止)，即使当前滚动位置技术上最接近当前/最后一个标签，它也会在该方向上捕捉到下一个标签。 这更符合用户直觉😁</li><li><code>Object</code> - 比如 <code>{snapTo: &#39;labels&#39;, duration: 0.3, delay: 0.1, ease: &#39;power1.inOut&#39;}</code>，使用下面属性完全自定义化（<code>snapTo</code> 属性是配置必须的）： <ul><li><code>snapTo[Number|Array|Function|&quot;labels&quot;]</code> - 决定捕获逻辑（同上面）</li><li><code>delay[Number]</code> - 上一次滚动事件和snapping动画开始之间的延迟（单位s）。默认是<code>scrub</code> 时间的一半（或 <code>scrub: true</code> 时，为 <code>0.1</code>）</li><li><code>directional[Boolean]</code> - snapping方向默认是用户上一次滚动的方向，可以通过 <code>directional: false</code> 禁用</li><li><code>duration[Number|Object]</code> - snapping动画的时间，单位s。<code>duration: 0.3</code> 表示花费0.3s，你也可以定义一个区间对象，比如 <code>duration: {min: 0.2, max: 3}</code> ，用于基于速度对提供的区间进行clamp。这样，当用户停止滚动到一个snapping point，如果自然停止点离snapping point很远，那么snapping point所需的时间就会更短。</li><li><code>ease[String|Function]</code> - snapping动画的 <a href="https://greensock.com/docs/v3/Eases" target="_blank" rel="noreferrer">ease</a> 函数，默认是 <code>&quot;powder3&quot;。</code></li><li><code>ineratia[Boolean]</code> - 告诉ScrollTrigger不考虑惯性因素，将 <code>inertia: false</code></li><li><code>onStart[Function]</code> - 当Snapping开始时的回调</li><li><code>onInterrupt[Function]</code> - snapping被终端时的回调，比如用户滚动到到mid-snap点</li><li><code>onComplete[Function]</code> - snapping完成时的回调</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于什么是Snapping，可以参考MDN: 表示一个强制滚动位置</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Scroll_Snap" target="_blank" rel="noreferrer">CSS Scroll Snap - MDN</a></li></ul></div><h3 id="⭐-toggleactions-string" tabindex="-1">⭐ <code>toggleActions: {String}</code> <a class="header-anchor" href="#⭐-toggleactions-string" aria-hidden="true">#</a></h3><p>决定关联动画4个阶段 <code>onEnter &amp; onLeave &amp; onEnterBack &amp; onLeaveBack</code> 按顺序如何被控制。默认是 <code>play none none none</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 表示</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// onEnter 时 play 进入时播放动画  trigger-start -&gt; scrollor-start ⬆️</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// onLeave 时 pause 离开时暂停动画 trigger-end -&gt; scrollor-end     ⬆️</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// onEnterBack 时 resume 重新返回时 恢复动画  trigger-end -&gt; scrollor-start  ⬇️</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// onLeaveBack 时 reset 再次离开时 重置动画   trigger-start -&gt; scrollor-end  ⬇️</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">toggleActions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">play pause resume reset</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>每个action可能值有：</p><ul><li><code>play</code></li><li><code>pause</code></li><li><code>resume</code></li><li><code>reset</code></li><li><code>restart</code></li><li><code>complete</code></li><li><code>reverse</code></li><li><code>none</code></li></ul><h3 id="toggleclass-string-object" tabindex="-1"><code>toggleClass: {String | Object}</code> <a class="header-anchor" href="#toggleclass-string-object" aria-hidden="true">#</a></h3><p>当ScrollTrigger 切换 <code>active | inactive</code> 时，给一个或多个元素 <code>添加|移除</code> 类。可以是下面形式：</p><ul><li><code>String</code> - 添加给 <code>trigger</code> 元素的类名，比如 <code>toggleClass: &#39;active&#39;</code></li><li><code>Object</code> - 不仅仅给 <code>trigger</code> 元素切换类，使用对象语法：<code>{targets: &#39;.my-selector&#39;, className: &#39;active&#39; }</code>。<code>targets</code> 可以是选择器或者对元素的引用，或元素数组</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意 <code>toggleActions</code> 不会应用 <code>toggleClass</code>。要以不同的方式切换类名，请使用回调函数（<code>onEnter</code> | <code>onLeave</code> | <code>onLeaveBack</code> | <code>onEnterBack</code>）</p></div><h3 id="trigger-string-element" tabindex="-1"><code>trigger: {String | Element}</code> <a class="header-anchor" href="#trigger-string-element" aria-hidden="true">#</a></h3><p>当ScrollTrigger激活时，被用于计算的在正常文档流中的元素或元素选择器。</p><h2 id="scrolltrigger工作原理-它和intersectionobserver类似" tabindex="-1">ScrollTrigger工作原理？它和IntersectionObserver类似？ <a class="header-anchor" href="#scrolltrigger工作原理-它和intersectionobserver类似" aria-hidden="true">#</a></h2><p>ScrollTrigger <strong>不会持续</strong> 在每一Tick都监控每个元素，以及检测其在viewport中的位置。因为我们对性能的要求达到了痴迷程度。相反，ScrollTrigger会提前初期，理清在自然文档流中 <code>start|end</code> 点的位置。换句话说，<code>ScrollTrigger会在scrollbar在 xxx 和 yyy 之间会被激活</code>。然后它会debounce scroll事件，只在下一次 <code>requestAnimationFrame</code>(Tick) 时更新，完美将GSAP与屏幕刷新进行同步。它 <strong><code>只</code></strong> 间歇性的监控滚动位置，这也意味着它性能很好🚀 。</p><p>ScrollTrigger会自动监听 <code>viewport/scrollor</code> <code>resize</code>事件，并重新计算所有的 <code>start/end</code> 位置（<code>onRefresh</code>）。事实上，因为resizing/refreshing是CPU密集的，它会在resize事件开始前等待200ms间隔。没错，我们寻求最大化性能。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noreferrer">IntersectionObserver</a> 是一个现代浏览器中的原生功能，它和ScrollTrigger差异：</p><ul><li>它会持续监控元素来感知它们的进入或离开，无论是否在滚动</li><li>它对追踪元素在2点之间的位置是没有帮助的，比如scrubbing动画</li><li>它允许你监控多个元素，并有一个回调触发，可以通过循环，并在进入的元素上触发交错的（Stagger）动画</li></ul><p>ScrollTrigger没有在底层使用IntersectionObserver，因为它缺乏必要的功能和兼容性。你当然可以同时使用IntersectionObserver和ScrollTrigger。</p><h2 id="pinning功能底层实现原理是什么" tabindex="-1">Pinning功能底层实现原理是什么？ <a class="header-anchor" href="#pinning功能底层实现原理是什么" aria-hidden="true">#</a></h2><ul><li>固定的元素（<code>pinned element</code>）立即被一个与之匹配的 <code>固定</code> 宽高的 <code>&lt;div&gt;</code> 包裹起来。包装元素会添加一个 <code>pin-spacer</code> 类。可以把它想象成一个代理元素，它打开了DOM中固定元素所在的空间，这样当它翻转到固定位置时就不会合并。</li><li>当ScrollTrigger激活时（即滚动位置在 start - end 之间），它将固定元素设置为 <code>position: fixed</code>，并通过 <code>top | left | width | height</code> 值对元素进行定位。。。除非scroller不是viewport，这种情况下是不会使用 <code>position: fixed</code> 的，这会破坏sub-scrolling，它只会用纯粹的transforms。如果将 <code>pinReparent</code> 设置为 <code>true</code>（我们推荐尽量避免这样做），固定元素将添加到 <code>&lt;body&gt;</code> 下，并且样式会内联，确保样式得以维持。</li><li>当ScrollTrigger变为非活动状态时，固定元素将变为原来的 <code>position</code> 值，并使用 <code>transform</code>，以正确放置元素</li><li>当窗口/滚动器被调整大小时，所有ScrollTriggers重新计算它们的开始/结束位置(onRefresh)。作为该过程的一部分，将从DOM中删除 <code>pin-spacer</code>，并将 <code>pin-spacer</code> 换回，以便测量结果与原始CSS一致。然后将 <code>pin-spacer</code> 交换回作为包装器。</li></ul><p>为什么不只使用transforms，避免使用 <code>position: fixed</code>？许多浏览器使用这种技术时，渲染会出现不一致的情况。在大多数现代浏览器中，滚动重绘是在不同的线程上处理的，这导致了令人讨厌的视觉故障。令人惊讶的是，<code>position: fixed</code> 似乎提供了更好的整体表现。性能对于滚动非常重要。</p><h2 id="scrub-true和duration如何一起使用" tabindex="-1">scrub: true和duration如何一起使用？ <a class="header-anchor" href="#scrub-true和duration如何一起使用" aria-hidden="true">#</a></h2><p>如果ScrollTrigger 设置了 <code>scrub: true</code>，并且ScrollTrigger有一个与之相关的timeline或tween动画，那么该动画的时间将作为补间将播放的总距离的比例。动画移动距离的比例是和动画的总时长相关的。</p><p>🌰 假设你有个一个timeline，包含3个tweens：1个1s的tween，1个3s的，另一个也是1s的tween。ScrollTrigger移动整个viewport高度的距离（或者trigger使用 <code>start: &#39;center bottom&#39; </code> &amp; <code>end: &#39;center top&#39;</code>）。</p><p>如果使用 <code>scrub: true</code>（或者数字），第一个tween占据 <code>1/5</code>（<code>1s / (1s + 3s + 1s)</code>）因此其滚动的距离为 <code>100% - 80%</code> 部分；第2个tween占据 <code>3/5</code>，因此其滚动的距离为 <code>80% - 20%</code>，第3个tween则占据 <code>1/5</code>，滚动的距离为 <code>20% - 0%</code></p>`,35),S=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"GSAP Starter Pen",src:"https://codepen.io/GreenSock/embed/preview/yLegBwO?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/yLegBwO">
  GSAP Starter Pen</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),C=o('<p>假如你将3个tweens的时间设置为一样，比如 <code>1s</code>，则其百分比将一样：<code>100%-&gt;66% &amp; 66%-&gt;33% &amp; 33%-0%</code>，都为 <code>1/3</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>换句话说，时间轴中的tween的时间值不重要，重要是其占据的比例。因为滚动距离是一定的，每个tween运动的距离取决于其比例。</p><p>💡如果你想让动画需要更长的滚动距离来完成，则将 <code>start</code> 到 <code>end</code> 的距离设置更长，比如 <code>end: &#39;+=4000&#39;</code> 使其滚动更长完成。</p></div><h2 id="想要-smooth-scrolling" tabindex="-1">想要 smooth scrolling？ <a class="header-anchor" href="#想要-smooth-scrolling" aria-hidden="true">#</a></h2><p>GreenSock的 <a href="https://greensock.com/docs/v3/Plugins/ScrollSmoother" target="_blank" rel="noreferrer">ScrollSmoother</a> 工具是构建在ScrollTrigger基础上的，因此它很容易集成和使用。它建立在原生滚动技术之上，避免了困扰其他平滑滚动库的大多数可访问性问题。会员专享插件😅</p><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-hidden="true">#</a></h2><ol><li>lottie如何结合ScrollTrigger？ <a href="https://greensock.com/docs/v3/HelperFunctions#lottie" target="_blank" rel="noreferrer">使用辅助函数</a></li></ol><p>其余省略，看原文档</p><h2 id="⚡-资源和demos" tabindex="-1">⚡ 资源和Demos <a class="header-anchor" href="#⚡-资源和demos" aria-hidden="true">#</a></h2><ul><li><a href="https://greensock.com/st-demos/" target="_blank" rel="noreferrer">StriggerScroll Demos 带有预览 - @GreenSock</a></li></ul><blockquote><p>理解ScrollTrigger示例：</p></blockquote><p>1️⃣ <a href="https://codepen.io/GreenSock/pen/f0119d684b35e881e86e4d6eb5ad2cc9" target="_blank" rel="noreferrer">Demo playground</a></p>',11),m=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Simple Demo - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/RwPXQOQ?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/RwPXQOQ">
  Simple Demo - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),A=e("p",null,[n("2️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/32672d461f522729c40fd89004a37dd5",target:"_blank",rel:"noreferrer"},"Basic Tweening on scroll")],-1),k=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Basic Tween - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/abOPrBj?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/abOPrBj">
  Basic Tween - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),v=e("p",null,[n("3️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/97d51a6681967e078a35f4a9e87954ea",target:"_blank",rel:"noreferrer"},"toggleActions")],-1),_=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"toggleActions - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/LYVKWGo?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/LYVKWGo">
  toggleActions - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),T=e("p",null,[n("4️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/c9448e33cdca10f9d18adb3ce47c6f87",target:"_blank",rel:"noreferrer"},"Scrubbing")],-1),w=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"toggleActions - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/LYVKWGo?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/LYVKWGo">
  toggleActions - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),G=e("p",null,[n("5️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/e86d485feaf4d13a38ae950a2e122e61",target:"_blank",rel:"noreferrer"},"Pinning")],-1),P=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Basic Pin - ScrollTrigger",src:"https://codepen.io/JamesSawyer/embed/preview/abGrxGB?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/JamesSawyer/pen/abGrxGB">
  Basic Pin - ScrollTrigger</a> by james sawyer (<a href="https://codepen.io/JamesSawyer">@JamesSawyer</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),E=e("p",null,[n("6️⃣ ⭐ "),e("a",{href:"https://codepen.io/GreenSock/pen/qBdeVJY",target:"_blank",rel:"noreferrer"},"ScrollTrigger Callbacks")],-1),x=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Callbacks - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/qBdeVJY?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/qBdeVJY">
  Callbacks - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),B=e("blockquote",null,[e("p",null,"Navigation Content")],-1),N=e("p",null,[n("1️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/KKpLdWW",target:"_blank",rel:"noreferrer"},"Layered pinning - ScrollTrigger")],-1),z=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Layered pinning - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/KKpLdWW?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/KKpLdWW">
  Layered pinning - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),j=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Layered Pinning From Bottom - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/BaowPwo?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/BaowPwo">
  Layered Pinning From Bottom - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),q=e("p",null,[n("2️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/YzygYvM",target:"_blank",rel:"noreferrer"},"Horizontal Scroll with Snapping"),n(" ("),e("a",{href:"https://codepen.io/GreenSock/pen/09859305f9c8fa20b9d3ed759384ce50",target:"_blank",rel:"noreferrer"},"Advanced example"),n(")")],-1),O=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Horizontal snapping sections (simple) - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/YzygYvM?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/YzygYvM">
  Horizontal snapping sections (simple) - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),L=e("p",null,[n("3️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/00a7aa90a17e39253d712438df20fe6a",target:"_blank",rel:"noreferrer"},"Single horizontal scrolling section")],-1),I=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Horizontal section scrolling - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/eYpOZvX?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/eYpOZvX">
  Horizontal section scrolling - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),V=e("p",null,[n("4️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/11d4bcb2a0f76bf753d10be8f4e4d2a6",target:"_blank",rel:"noreferrer"},"Horizontal carousel")],-1),R=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Horizontal parallax effect - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/JjYPgdp?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/JjYPgdp">
  Horizontal parallax effect - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),Y=e("blockquote",null,[e("p",null,"⭐ Parallax Effects")],-1),J=e("p",null,[n("1️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/RwVGNea",target:"_blank",rel:"noreferrer"},"Parallax with data-speed")],-1),W=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"ScrollTrigger Parallax with data-speed attribute",src:"https://codepen.io/GreenSock/embed/preview/RwVGNea?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/RwVGNea">
  ScrollTrigger Parallax with data-speed attribute</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),K=e("p",null,[n("2️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/8e9dd88cdd432a91ec2d59b874fb8f28",target:"_blank",rel:"noreferrer"},"Parallax header")],-1),M=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Parallax header  - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/OJyPmgX?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/OJyPmgX">
  Parallax header  - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),U=e("p",null,[n("3️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/e785396ee2b11ab85d33b4bebdd4997f?editors=0010",target:"_blank",rel:"noreferrer"},"Parallax scene")],-1),H=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Parallax scene on scroll -  ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/vYNNvMj?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/vYNNvMj">
  Parallax scene on scroll -  ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),X=e("blockquote",null,[e("p",null,"Pairing with native scroll technoligies")],-1),Q=e("p",null,[n("1️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/c4691a379cfd1a9664e381777055a7fa",target:"_blank",rel:"noreferrer"},"ScrollTrigger + Navigation Links"),n(" 感觉效果有点怪")],-1),Z=e("p",null,[n("2️⃣ "),e("a",{href:"https://codepen.io/GreenSock/pen/1e61806b532ea3289cc41c6693c50125",target:"_blank",rel:"noreferrer"},"ScrollTrigger + CSS scroll snapping")],-1),$=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Pair with CSS Scroll Snapping - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/YzyaKrq?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/YzyaKrq">
  Pair with CSS Scroll Snapping - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),ee=e("blockquote",null,[e("p",null,"🚀 其它效果")],-1),ne=e("ol",null,[e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/osublake/pen/2152a28cffe2c2c0cca8a3e47f7b21c6?editors=0010",target:"_blank",rel:"noreferrer"},"Airpods image swap on scroll"),n(" 👍 frames 帧动画 + 滚动 效果很赞")]),e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"ScrollTrigger onUpdate Airpods",src:"https://codepen.io/JamesSawyer/embed/preview/mdLomKr?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/JamesSawyer/pen/mdLomKr">
  ScrollTrigger onUpdate Airpods</a> by james sawyer (<a href="https://codepen.io/JamesSawyer">@JamesSawyer</a>)
  on <a href="https://codepen.io">CodePen</a>.
`)]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/250ee0b1ec278d8f866bd3424f997ea9",target:"_blank",rel:"noreferrer"},"Scroll to build something"),n(" （或 "),e("a",{href:"https://codepen.io/GreenSock/pen/f9d9c0d5ab998fb65c71fbeeb7f41634",target:"_blank",rel:"noreferrer"},"scroll to deconstruct"),n("）")])]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/dba67454108dde8a39323b644c6f9fa4",target:"_blank",rel:"noreferrer"},"Different animations based on the scroll direction"),n(" 很常见的一种滚动元素动画效果")])]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/857f9479067b7089280f2d23f641f8f2",target:"_blank",rel:"noreferrer"},"Path drawn on scroll"),n(" 👍 SVG + MotionPath + ScrollTrigger (VIP课程效果😁)")]),e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Animate path on scroll - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/rNOBLBV?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/rNOBLBV">
  Animate path on scroll - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`)]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/kdbkapsere/pen/514f4d19e03ced84b60dfdacc382adce",target:"_blank",rel:"noreferrer"},"Infinite sections on scroll"),n(" 使用 "),e("code",null,"ScrollTrigger.refresh()"),n(" + "),e("code",null,"onUpdate()"),n(" + "),e("code",null,"progress"),n(" 动态创建sections")])]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/29abddb42a9e48b41b9bbd851a93daf3",target:"_blank",rel:"noreferrer"},"Different contents shown based on section scrolled to"),n(" 根据滚动，左侧内容不停的变化")])]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/3748602f451c269faa3f1d1be1c5bfe5?editors=0100",target:"_blank",rel:"noreferrer"},"Pinned elements animated on scroll"),n(" 很有意思的动画效果 + MotionPath")])]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/03a0bf209de49a8cef8fffb1b0eb4eab",target:"_blank",rel:"noreferrer"},"Intensify on scroll"),n(" 滚动的越快，文本左右晃动的越剧烈")])]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/eYpGLYL",target:"_blank",rel:"noreferrer"},"Skew content based on scroll velocity"),n(" 👍 根据滚动速度调整图片skew效果（虽然图挂了，但效果很好）")]),e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Skew on scroll using scroll velocity - ScrollTrigger",src:"https://codepen.io/GreenSock/embed/preview/eYpGLYL?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/GreenSock/pen/eYpGLYL">
  Skew on scroll using scroll velocity - ScrollTrigger</a> by GreenSock (<a href="https://codepen.io/GreenSock">@GreenSock</a>)
  on <a href="https://codepen.io">CodePen</a>.
`)]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/7d8fb6967cd8dc7cdfbdc91fd4247dbe?editors=0100",target:"_blank",rel:"noreferrer"},"Gallery revealed on Scroll")])]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/GreenSock/pen/aeb6d5e3af5c913c98cf3a8f17657aba",target:"_blank",rel:"noreferrer"},"Before/after images revealed on scroll")])]),e("li",null,[e("p",null,[e("a",{href:"https://codepen.io/noeldelgado/pen/4d5d66751a93cbc8c9fdbdc5fe29fbda",target:"_blank",rel:"noreferrer"},"Horizontal translation sections on scroll"),n(" 👍 水平交叉滚动效果，使用 "),e("a",{href:"https://github.com/desandro/imagesloaded",target:"_blank",rel:"noreferrer"},"imagesloaded"),n(" 确保所有图片都加载完成")]),e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"GSAP ScrollTrigger - Demo",src:"https://codepen.io/noeldelgado/embed/preview/BaogqYy?default-tab=result&theme-id=dark",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/noeldelgado/pen/BaogqYy">
  GSAP ScrollTrigger - Demo</a> by Noel Delgado (<a href="https://codepen.io/noeldelgado">@noeldelgado</a>)
  on <a href="https://codepen.io">CodePen</a>.
`)])],-1),oe=e("p",null,"GreenSock官方CodePen仓库：",-1),le=e("ul",null,[e("li",null,[e("a",{href:"https://codepen.io/GreenSock/pens/tags/?selected_tag=scrolltrigger",target:"_blank",rel:"noreferrer"},"GreenSock ScrollTrigger"),n(" 约200多个仓库")])],-1),se=e("p",null,"2022年10月20日11:13:24",-1),ae=[t,c,p,i,d,g,h,y,u,F,D,f,b,S,C,m,A,k,v,_,T,w,G,P,E,x,B,N,z,j,q,O,L,I,V,R,Y,J,W,K,M,U,H,X,Q,Z,$,ee,ne,oe,le,se];function re(te,ce,pe,ie,de,ge){return a(),s("div",null,ae)}const ue=l(r,[["render",re]]);export{ye as __pageData,ue as default};
